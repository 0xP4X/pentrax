"""Initial migration with all models

Revision ID: 554ff7f8aad3
Revises: 
Create Date: 2025-07-21 07:24:44.918399

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '554ff7f8aad3'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('blocked_device',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('fingerprint', sa.String(length=128), nullable=False),
    sa.Column('reason', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('fingerprint')
    )
    op.drop_table('admin_action_log')
    op.drop_table('message_reaction')
    with op.batch_alter_table('blocked_ips', schema=None) as batch_op:
        batch_op.drop_constraint('blocked_ips_ip_address_key', type_='unique')
        batch_op.drop_index('ix_blocked_ips_ip_address')
        batch_op.create_index(batch_op.f('ix_blocked_ips_ip_address'), ['ip_address'], unique=True)

    with op.batch_alter_table('comment', schema=None) as batch_op:
        batch_op.drop_index('idx_comment_user_id')

    with op.batch_alter_table('comment_like', schema=None) as batch_op:
        batch_op.drop_index('idx_comment_like_comment_id')
        batch_op.drop_index('idx_comment_like_user_id')

    with op.batch_alter_table('learning_path_completion', schema=None) as batch_op:
        batch_op.drop_constraint('learning_path_completion_learning_path_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('learning_path_completion_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])
        batch_op.create_foreign_key(None, 'learning_path', ['learning_path_id'], ['id'])

    with op.batch_alter_table('learning_path_lab', schema=None) as batch_op:
        batch_op.drop_constraint('learning_path_lab_lab_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('learning_path_lab_learning_path_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'lab', ['lab_id'], ['id'])
        batch_op.create_foreign_key(None, 'learning_path', ['learning_path_id'], ['id'])

    with op.batch_alter_table('post', schema=None) as batch_op:
        batch_op.drop_index('idx_post_user_id')

    with op.batch_alter_table('post_like', schema=None) as batch_op:
        batch_op.drop_index('idx_post_likes_post_id')
        batch_op.drop_index('idx_post_likes_user_id')

    with op.batch_alter_table('siem_events', schema=None) as batch_op:
        batch_op.alter_column('timestamp',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_column('last_ip')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('last_ip', sa.VARCHAR(length=64), autoincrement=False, nullable=True))

    with op.batch_alter_table('siem_events', schema=None) as batch_op:
        batch_op.alter_column('timestamp',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('post_like', schema=None) as batch_op:
        batch_op.create_index('idx_post_likes_user_id', ['user_id'], unique=False)
        batch_op.create_index('idx_post_likes_post_id', ['post_id'], unique=False)

    with op.batch_alter_table('post', schema=None) as batch_op:
        batch_op.create_index('idx_post_user_id', ['user_id'], unique=False)

    with op.batch_alter_table('learning_path_lab', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('learning_path_lab_learning_path_id_fkey', 'learning_path', ['learning_path_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('learning_path_lab_lab_id_fkey', 'lab', ['lab_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('learning_path_completion', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('learning_path_completion_user_id_fkey', 'user', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('learning_path_completion_learning_path_id_fkey', 'learning_path', ['learning_path_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('comment_like', schema=None) as batch_op:
        batch_op.create_index('idx_comment_like_user_id', ['user_id'], unique=False)
        batch_op.create_index('idx_comment_like_comment_id', ['comment_id'], unique=False)

    with op.batch_alter_table('comment', schema=None) as batch_op:
        batch_op.create_index('idx_comment_user_id', ['user_id'], unique=False)

    with op.batch_alter_table('blocked_ips', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_blocked_ips_ip_address'))
        batch_op.create_index('ix_blocked_ips_ip_address', ['ip_address'], unique=False)
        batch_op.create_unique_constraint('blocked_ips_ip_address_key', ['ip_address'], postgresql_nulls_not_distinct=False)

    op.create_table('message_reaction',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('message_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('emoji', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='message_reaction_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='message_reaction_pkey'),
    sa.UniqueConstraint('message_id', 'user_id', 'emoji', name='unique_user_message_reaction', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('admin_action_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('admin_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('reason', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['user.id'], name='admin_action_log_admin_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='admin_action_log_user_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='admin_action_log_pkey')
    )
    op.drop_table('blocked_device')
    # ### end Alembic commands ###
